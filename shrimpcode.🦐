fun abs(n) {
	return n < 0 ? -n : n;
}

class Rope {
	init() {
		this.headPos = [0,0];
		this.tailPos = [0,0];
		
		this.recordedTailPos = [];
		
		//this.doPrint = false;
	}
	
	//DEBUG only for test file
	printCurrent() {
		println("==========");
		for(let i = 4; i >= 0; i--) {
			for(let j = 0; j <= 5; j++) {
				if(this.headPos[0] == j and this.headPos[1] == i) {
					print('H');
				} else if(this.tailPos[0] == j and this.tailPos[1] == i) {
					print('T');
				} else if(i == 0 and j == 0) {
					print('s');
				} else {
					print('.');
				}
			}
			print("\n");
		}
	}
	
	moveStep(dir) {
		if(dir == 'R') {
			this.headPos[0] = this.headPos[0] + 1;
		} else if(dir == 'L') {
			this.headPos[0] = this.headPos[0] - 1;
		} else if(dir == 'U') {
			this.headPos[1] = this.headPos[1] + 1;
		} else if(dir == 'D') {
			this.headPos[1] = this.headPos[1] - 1;
		} else {
			println("invalid direction");
		}
		
		this.adjustTail();
		
		//println("step:\n", this.headPos, "\n", this.tailPos);
		//if(this.doPrint) this.printCurrent();
	}
	
	adjustTail() {
		//add diagonal movement correctly
		let diagonalMovement = false;
		if((abs(this.headPos[0] - this.tailPos[0]) > 1 and abs(this.headPos[1] - this.tailPos[1]) > 0)
		or (abs(this.headPos[0] - this.tailPos[0]) > 0 and abs(this.headPos[1] - this.tailPos[1]) > 1)) {
			//println("DIAG");
			this.adjustDiagonally();
			return this.recordTailPosition(this.tailPos[0], this.tailPos[1]);
		}
	
		if(this.headPos[0] - this.tailPos[0] > 1) {
			this.tailPos[0] = this.tailPos[0] + 1;
		} else if(this.tailPos[0] - this.headPos[0] > 1) {
			this.tailPos[0] = this.tailPos[0] - 1;
		}
		
		if(this.headPos[1] - this.tailPos[1] > 1) {
			this.tailPos[1] = this.tailPos[1] + 1;
		} else if(this.tailPos[1] - this.headPos[1] > 1) {
			this.tailPos[1] = this.tailPos[1] - 1;
		}
		
		this.recordTailPosition(this.tailPos[0], this.tailPos[1]);
	}
	
	adjustDiagonally() {
		const xDiff = this.headPos[0] - this.tailPos[0];
		const yDiff = this.headPos[1] - this.tailPos[1];
		
		if(xDiff > 1) {
			if(yDiff > 0) {
				this.tailPos[0] = this.tailPos[0] + 1;
				this.tailPos[1] = this.tailPos[1] + 1;
			} else {
				this.tailPos[0] = this.tailPos[0] + 1;
				this.tailPos[1] = this.tailPos[1] - 1;
			}
		} else if(xDiff < -1) {
			if(yDiff > 0) {
				this.tailPos[0] = this.tailPos[0] - 1;
				this.tailPos[1] = this.tailPos[1] + 1;
			} else {
				this.tailPos[0] = this.tailPos[0] - 1;
				this.tailPos[1] = this.tailPos[1] - 1;
			}
		} else if(yDiff > 1) {
			if(xDiff > 0) {
				this.tailPos[0] = this.tailPos[0] + 1;
				this.tailPos[1] = this.tailPos[1] + 1;
			} else {
				this.tailPos[0] = this.tailPos[0] - 1;
				this.tailPos[1] = this.tailPos[1] + 1;
			}
		} else if(yDiff < -1) {
			if(xDiff > 0) {
				this.tailPos[0] = this.tailPos[0] + 1;
				this.tailPos[1] = this.tailPos[1] - 1;
			} else {
				this.tailPos[0] = this.tailPos[0] - 1;
				this.tailPos[1] = this.tailPos[1] - 1;
			}
		} else {
			println('diagonal error');
		}
	}
	
	recordTailPosition(x, y) {
		let alreadyInList = false;
		
		for(let i = 0; i < this.recordedTailPos.len(); i++) {
			if(this.recordedTailPos[i][0] == x and this.recordedTailPos[i][1] == y)
				alreadyInList = true;
		}
		
		if(!alreadyInList) {
			this.recordedTailPos.append([x, y]);
		}
	}
	
	move(dir, amount) {
		for(let i = 0; i < amount; i++) {
			this.moveStep(dir);
		}
	}
	
	exeCommand(line) {
		const dir = line.at(0);
		const amount = line.slice(2, line.len() - 1).number();
		
		this.move(dir, amount);
	}
	
	print() {
		println('h-pos: ', this.headPos, "\nt-pos: ", this.tailPos);
		//println('recorded: ', this.recordedTailPos);
		println('num visited: ', this.recordedTailPos.len());
	}
}


//written code
const rope = Rope();

//this flag activates printing every step
//only works for the test file
//rope.doPrint = true;

const file = open('test.txt');

let line = file.getline();

const start = clock();

while(line) {
	rope.exeCommand(line);
	line = file.getline();
}

rope.print();

collectGarbage();

println("time: ", clock() - start);